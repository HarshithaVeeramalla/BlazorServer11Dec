@page "/admin/orders/delete"
@inject IOrderService OrderService
@using SSSKLv2.Data
@inject NavigationManager NavigationManager
@using SSSKLv2.Data.DAL.Exceptions
@using SSSKLv2.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using SSSKLv2.Components.Account

@attribute [Authorize(Policy = Policies.Admin)]

<PageTitle>SSSKLv2 | Order Verwijderen</PageTitle>

<h1>Verwijderen</h1>

<h3>Weet je het zeker?</h3>
<div>
    <h4>Order</h4>
    <hr />
    @if (order is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Datum</dt>
            <dd class="col-sm-10">@order.CreatedOn.ToString("dd/MM/yyyy")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Gebruiker</dt>
            <dd class="col-sm-10">@order.User.UserName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Product</dt>
            <dd class="col-sm-10">@order.ProductNaam</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Hoeveelheid</dt>
            <dd class="col-sm-10">@order.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Kosten</dt>
            <dd class="col-sm-10">@order.Paid.ToString("C")</dd>
        </dl>
        <EditForm method="post" Model="order" OnValidSubmit="DeleteOrder" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(order is null)">Delete</button> |
            <a href="/admin/orders">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Order? order;

    [SupplyParameterFromQuery]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    public async Task GetData()
    {
        try
        {
            order = await OrderService.GetOrderById(Id);

        }
        catch (NotFoundException)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteOrder()
    {
        try
        {
            await OrderService.DeleteOrder(Id);
            NavigationManager.NavigateTo("/admin/orders");
        }
        catch (NotFoundException)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
