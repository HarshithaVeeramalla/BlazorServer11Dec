@page "/"
@using Microsoft.AspNetCore.Authorization
@using SSSKLv2.Data
@using SSSKLv2.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@using System.Linq
@attribute [Authorize]

@inject IApplicationUserService ApplicationUserService
@inject IProductService ProductService

<PageTitle>SSSKLv2 | Bestellen</PageTitle>

@if (Model!.Products == null || Model!.Users == null)
{
    <p>Laden...</p>
}
else
{
        @* <DataAnnotationsValidator /> *@
        @* <ValidationSummary class="text-danger" /> *@
        <div class="row">
            <div class="col-md-4 mb-3">
                <h4>Wat</h4>
                <div class="row">
                    @foreach (var user in Model!.Users)
                    {
                        <div class="col-6">
                            <button type="button" class="btn btn-primary bg-body-tertiary btn-select w-100 m-1 text-start" @onclick="@(e => OnUserClick(e, user.Value.Id))" @onclick:preventDefault>
                                <InputCheckbox class="form-check-input btn-select-checkbox me-1" @bind-Value="user.Selected" />
                                @user.Value.Name @user.Value.Surname.First()
                            </button>
                        </div>
                    }
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <h4>Wie</h4>
                <div class="row">
                    @foreach (var product in Model!.Products)
                    {
                        <div class="col-6">
                            <button type="button" class="btn btn-primary bg-body-tertiary btn-select w-100 m-1 text-start" @onclick="@(e => OnProductClick(e, product))">
                                <InputCheckbox class="form-check-input btn-select-checkbox me-1" @bind-Value="product.Selected" />
                                @product.Value.Name <small>@product.Value.Price.ToString("C")</small>
                            </button>
                        </div>
                    }
                </div>
            </div>    
            <div class="col-md-4">
                <h4>Betalen</h4>
                <div class="row mb-2">
                    <div class="col-12">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="@Model.Split" class="form-check-input" id="splitCheckbox"/>
                            <label class="form-check-label" for="splitCheckbox">
                                Rekening splitten?
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-8">
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1">Aantal</span>
                            <InputNumber @bind-Value="@Model.Amount" class="form-control"/>
                        </div>
                    </div>
                    <div class="col-4">
                        <button type="submit" class="btn btn-primary w-100">Betalen</button>
                    </div>
                </div>
            </div>
        </div>
}

@code {

    [SupplyParameterFromForm]
    public BestellingDTO Model { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    public async Task GetData()
    {
        Model.Products = (await ProductService.GetAll())
            .Select(x => new Select<Product> {Value = x})
            .ToList();
        Model.Users = (await ApplicationUserService.GetAllUsers())
            .Select(x => new Select<ApplicationUser> {Value = x})
            .ToList();
    }

    public async Task Submit()
    {
        var set = false;
    }

    public void OnUserClick(MouseEventArgs args, string selectUserId)
    {
        var selectUser = Model.Users.FirstOrDefault(e => e.Value.Id == selectUserId);
        selectUser.Selected = !selectUser.Selected;
    }
    
    public void OnProductClick(MouseEventArgs args, Select<Product> selectProduct)
    {
        selectProduct.Selected = !selectProduct.Selected;
    }

    public class Select<T>
    {
        public bool Selected { get; set; }
        public T Value { get; set; }
    }

    public class BestellingDTO
    {
        [MinLength(1, ErrorMessage = "Er moeten minimaal 1 of meer producten worden geselecteerd")]
        public IList<Select<Product>> Products { get; set; } = new List<Select<Product>>();
        [MinLength(1, ErrorMessage = "Er moeten minimaal 1 of meer gebruikers worden geselecteerd")]
        public IList<Select<ApplicationUser>> Users { get; set; } = new List<Select<ApplicationUser>>();
        [Required]
        public int Amount { get; set; }
        public bool Split { get; set; }
    }
}
